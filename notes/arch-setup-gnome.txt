TODO: GNOME variant is WIP, need to test from fresh install

Set temporary root password and start sshd if desired for remote
install

# passwd
# systemctl start sshd  # only if performing remote install

If needed, bring up the network and check your IP address

# dhclient enpls0  # choose the correct interface
# ip addr

This is probably not needed unless using something besides a US
keyboard layout, but I tend to do it anyway

# loadkeys us

Perform disk partitioning and LVM setup. Start by checking the device
and current LVM configuration

# lsblk
# pvdisplay
# vgdisplay
# lvdisplay

For example, if I need to remove some old LVM configuration to start
fresh:

# lvremove /dev/mapper/centos_bree-home
# lvremove /dev/mapper/centos_bree-root
# lvremove /dev/mapper/centos_bree-swap
# vgremove centos_bree

Partition the primary storage device (take care to select the right
device)

# gdisk /dev/sda

Target partition layout might look something like this:

                1 MB EF02  GPT    sda1  (/dev/sda1)
              500 MB 8300  /boot  sda2  (/dev/sda2)
   <remaining space> 8E00  LVM    sda3  (/dev/sda3)

Set up LVM:

# pvcreate /dev/sda3
# vgcreate vg0 /dev/sda3
# lvcreate -L 8G vg0 -n swap
# lvcreate -l 100%FREE vg0 -n root

Format the partitions:

# mkfs.ext4 /dev/sda2
# mkfs.ext4 /dev/mapper/vg0-root
# mkswap /dev/mapper/vg0-swap

Set up any other drives if you want (in my main workstation I have a
dedicated drive that I mount on /var/lib/libvirt for libvirt/KVM VM
work).

Now mount the partitions and enable swap:

# swapon /dev/mapper/vg0-swap
# mount /dev/mapper/vg0-root /mnt
# mkdir /mnt/boot
# mount /dev/sda2 /mnt/boot

Configure the mirror list to be used by pacstrap now and your new
system later (be sure to select mirrors relevant to your location and
preference:

# vi /etc/pacman.d/mirrorlist

<file>
...
   Server = http://ftp.osuosl.org/pub/archlinux/$repo/os/$arch
   Server = http://mirrors.cat.pdx.edu/archlinux/$repo/os/$arch
...
</file>

Bootstrap the system and generate the fstab:

# pacstrap /mnt base
# genfstab -p /mnt >> /mnt/etc/fstab

If necessary, edit the fstab file to match what your HD configuration
will be upon reboot. Often this isn't necessary, but sometimes the
fixed storage device nodes will be different upon reboot (e.g. your HD
might now be /dev/sdb, but upon reboot /dev/sda); switching to UUID
based labels would probably solve this, haven't investigated for Arch
yet.

Now chroot into the new installation and finalize the basic installation:

# arch-chroot /mnt
# echo ceres.bayprogrammer.com > /etc/hostname
# ln -sf /usr/share/zoneinfo/US/Pacific /etc/localtime
# vi /etc/locale.gen

<file>
...
   en_US.UTF-8 UTF-8
   en_US ISO-8859-1
...
</file>

# locale-gen
# locale > /etc/locale.conf
# vi /etc/vconsole.conf

<file>
KEYMAP=us
</file>

# vi /etc/mkinitcpio.conf

<file>
...
   HOOKS="base udev autodetect modconf block lvm2 filesystems keyboard fsck"
...
</file>

# mkinitcpio -p linux
# pacman -S grub
# grub-install --target=i386-pc --recheck --debug /dev/sda
# grub-mkconfig -o /boot/grub/grub.cfg

Set the root password for your new installation and also set up a
non-privileged user:

# passwd
# useradd -m -g users -G wheel zebdeos
# passwd zebdeos

Install packages from package list (script under scripts, package list under
notes, in my dotfiles repo, be sure to reference the full path to the location
using from):

TODO: wget script and package list from github raw to /tmp for use below

# pacman -S --needed $(/tmp/flatten_pkg_list.sh /tmp/archpackages-gnome.txt)
# pacman -D --asexplicit $(/tmp/flatten_pkg_list.sh /tmp/archpackages-gnome.txt)

Configure sudo to allow users in the wheel group to issue commands
with super user privileges

# visudo

<file>
...
%wheel ALL=(ALL) ALL
...
</file>


If you want your user to use ZSH right off the bat upon reboot, you
can change its shell now:

# chsh -s /bin/zsh zebdeos

Enable gdm for the display manager (where you log in from) so that the
system boots into a GUI login, the NetworkManager service, ssh server,
and the cups printing subsystem. Pulse Audio should be started on
demand by GNOME. [TODO: verify exactly how and when Pulse Audio is
started by GNOME or other parts of the environment]

# systemctl enable gdm
# systemctl enable NetworkManager
# systemctl enable sshd
# systemctl enable org.cups.cupsd

As an alternative to enabling NetworkManager we can rely on dhcpcd to
bring up the interface (this would be useful in a server environment
or where we don't need NetworkManager's services):

# ip link  # determine what the interface is
# systemctl enable dhcpcd@ens5

And we could bring up the interface manually like this:

# dhcpcd ens5

To avoid some funky font issues in some apps let's disable
bitmapped fallback fonts from X11:

# ln -s /etc/fonts/conf.avail/70-no-bitmaps.conf \
        /etc/fonts/conf.d/

So that our user can access libvirt directly without having to enter a
password we will set up a custom polkit rule:

# vi /etc/polkit-1/rules.d/49-libvirtwheel.rules

<file>
polkit.addRule(function(action, subject){
    if (action.id == "org.libvirt.unix.manage" &&
        subject.isInGroup("wheel")) {
            return polkit.Result.YES;
    }
});
</file>

Note that this changes the default behavior of allowing access to
wheel users but requiring a password.

Now let's enable nested virtualization for KVM (see
https://wiki.archlinux.org/index.php/KVM#Nested_virtualization):

Note: don't do this if you're running a CPU without virtualization
extensions supporting nexted virt (see the arch wiki above for
documentation on how to check things).

# vi /etc/modprobe.d/modprobe.conf

<file>
options kvm_intel nested=1
</file>

We add our user to the docker group allowing access to the docker
service directly to our normal user:

# usermod -a -G docker zebdeos

And then finally enable the libvirt and docker services:

# systemctl enable libvirtd
# systemctl enable docker

TODO: libvirt vagrant provider installation

Now things are installed we can exit the chroot and reboot the system:

# exit
# umount -R /mnt
# sync
# shutdown -h now  # I prefer to halt to easily remove USB stick

Upon reboot I log into as my normal user, launch GNOME Terminal, then
install my dotfiles. Feel free to look at my dotfiles repo to see how
I set things up.

You may want to use qtconfig-qt4 to have QT4 apps adopt the GTK theme
appearance (not sure about QT5 apps yet).

Once the system has rebooted I like to install some packages from the
AUR:

- cower (an AUR helper)
- Perl 6 (rakudo / moarvm)

TODO: provide instructions for building and installing those from AUR
