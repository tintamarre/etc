Set temporary root password and start sshd if desired for remote
install

# passwd
# systemctl start sshd  # only if performing remote install

If needed, bring up the network and check your IP address

# dhclient enpls0  # choose the correct interface
# ip addr

This is probably not needed unless using something besides a US
keyboard layout, but I tend to do it anyway

# loadkeys us

Perform disk partitioning and LVM setup. Start by checking the device
and current LVM configuration

# lsblk
# pvdisplay
# vgdisplay
# lvdisplay

For example, if I need to remove some old LVM configuration to start
fresh:

# lvremove /dev/mapper/centos_bree-home
# lvremove /dev/mapper/centos_bree-root
# lvremove /dev/mapper/centos_bree-swap
# vgremove centos_bree

Partition the primary storage device (take care to select the right
device)

# gdisk /dev/sda

Target partition layout might look something like this:

                1 MB EF02  GPT    sda1  (/dev/sda1)
              500 MB 8300  /boot  sda2  (/dev/sda2)
   <remaining space> 8E00  LVM    sda3  (/dev/sda3)

Set up LVM:

# pvcreate /dev/sda3
# vgcreate vg0 /dev/sda3
# lvcreate -L 8G vg0 -n swap
# lvcreate -l 100%FREE vg0 -n root

Format the partitions:

# mkfs.ext4 /dev/sda2
# mkfs.ext4 /dev/mapper/vg0-root
# mkswap /dev/mapper/vg0-swap

Set up any other drives if you want (in my main workstation I have a
dedicated drive that I mount on /var/lib/libvirt for libvirt/KVM VM
work).

Now mount the partitions and enable swap:

# swapon /dev/mapper/vg0-swap
# mount /dev/mapper/vg0-root /mnt
# mkdir /mnt/boot
# mount /dev/sda2 /mnt/boot

Configure the mirror list to be used by pacstrap now and your new
system later (be sure to select mirrors relevant to your location and
preference:

# vi /etc/pacman.d/mirrorlist

<file>
...
   Server = http://ftp.osuosl.org/pub/archlinux/$repo/os/$arch
   Server = http://mirrors.cat.pdx.edu/archlinux/$repo/os/$arch
...
</file>

Bootstrap the system and generate the fstab:

# pacstrap /mnt base
# genfstab -p /mnt >> /mnt/etc/fstab

If necessary, edit the fstab file to match what your HD configuration
will be upon reboot. Often this isn't necessary, but sometimes the
fixed storage device nodes will be different upon reboot (e.g. your HD
might now be /dev/sdb, but upon reboot /dev/sda); switching to UUID
based labels would probably solve this, haven't investigated for Arch
yet.

Now chroot into the new installation and finalize the basic installation:

# arch-chroot /mnt
# echo ceres.bayprogrammer.com > /etc/hostname
# ln -sf /usr/share/zoneinfo/US/Pacific /etc/localtime
# vi /etc/locale.gen

<file>
...
   en_US.UTF-8 UTF-8
   en_US ISO-8859-1
...
</file>

# locale-gen
# locale > /etc/locale.conf
# vi /etc/vconsole.conf

<file>
KEYMAP=us
</file>

# vi /etc/mkinitcpio.conf

<file>
...
   HOOKS="base udev autodetect modconf block lvm2 filesystems keyboard fsck"
...
</file>

# mkinitcpio -p linux
# pacman -S grub
# grub-install --target=i386-pc --recheck --debug /dev/sda
# grub-mkconfig -o /boot/grub/grub.cfg

Set the root password for your new installation and also set up a
non-privileged user:

# passwd
# useradd -m -g users -G wheel zebdeos
# passwd zebdeos

Install some additional essential packages:

# pacman -S --asexplicit openssh tmux rsync sudo ed zsh curl wget \
                         nethack rogue bsd-games fortune-mod pwgen \
                         mc ranger vifm zsh-syntax-highlighting tree \
                         sl dosfstools ntfsprogs

Configure sudo to allow users in the wheel group to issue commands
with super user privileges

# visudo

<file>
...
%wheel ALL=(ALL) ALL
...
</file>


If you want your user to use ZSH right off the bat upon reboot, you
can change its shell now:

# chsh -s /bin/zsh zebdeos

I'm currently using a full GNOME 3 GUI environment, and this can all
be installed and ready to go for first boot (along with any other
packages you care to install).

Here's the packages I like for a GUI desktop:

# pacman -S --asexplicit dhclient networkmanager xorg gnome \
                         gnome-extra firefox chromium netsurf dillo \
                         lynx links surfraw pidgin-otr hexchat emacs \
                         gvim libreoffice-fresh cups cups-filters \
                         cups-pdf foomatic-db foomatic-db-engine \
                         system-config-printer gnome-tweak-tool \
                         gconf-editor xfce4-terminal mate-terminal \
                         docky caja fuse mtpfs gvfs-mtp

You will need to enable some services at this point for things to boot
into the graphical environment upon restart:

# systemctl enable NetworkManager
# systemctl enable sshd
# systemctl enable gdm
# systemctl enable org.cups.cupsd

As an alternative to enabling NetworkManager we can rely on dhcpcd to
bring up the interface (this would be useful in a server environment
or where we don't need NetworkManager's services):

# ip link  # determine what the interface is
# systemctl enable dhcpcd@ens5

And we could bring up the interface manually like this:

# dhcpcd ens5

You're also going to want spell checking and good fonts right out of
the box:

# pacman -S --asexplicit aspell aspell-en hunspell hunspell-en \
                         ttf-bitstream-vera ttf-dejavu ttf-freefont \
                         ttf-linux-libertine ttf-oxygen ttf-droid \
                         ttf-fira-mono ttf-fira-sans ttf-gentium \
                         ttf-inconsolata ttf-liberation ttf-symbola \
                         ttf-ubuntu-font-family \
                         adobe-source-code-pro-fonts \
                         adobe-source-sans-pro-fonts \
                         adobe-source-serif-pro-fonts cantarell-fonts \
                         gnu-free-fonts terminus-font

Also to avoid some funky font issues in some apps let's disable
bitmapped fallback fonts from X11:

# ln -s /etc/fonts/conf.avail/70-no-bitmaps.conf \
        /etc/fonts/conf.d/

Packages enabling multi-media playback, audo processing, screen
recording, and video processing

# pacman -S --asexplicit gst-libav gst-plugins-bad gst-plugins-base \
                         gst-plugins-base-libs gst-plugins-good \
                         gst-plugins-ugly ffmpeg espeak audacity vlc \
                         mplayer rhythmbox gnome-sound-recorder pitivi \
                         recordmydesktop gtk-recordmydesktop \
                         simplescreenrecorder frei0r-plugins gource \
                         libdvdread libdvdcss libdvdnav openshot

Here's applications I like to keep on hand for doing graphics and 3d
modelling:

# pacman -S --asexplicit gimp inkscape povray blender graphicsmagick

Here's the packages I like related to development:

# pacman -S --asexplicit git cvs svn fossil mercurial bzr base-devel \
                         ncurses llvm clang nasm yasm perl perlbrew \
                         cpanminus v8 js nodejs lua luarocks chicken \
                         guile ocaml rust python3 python-pip \
                         python-virtualenv cython pypy python2 \
                         python2-pip python2-virtualenv sbcl \
                         jdk8-openjdk clojure rlwrap supercollider \
                         ruby go android-tools android-udev sqlite

Kitchen sink of libraries (most is already installed; also all the
gnome libs seem to be installed as part of gnome-extra):

# pacman -S --asexplicit allegro sdl mesa mesa-libgl libxcb xcb-util \
                         libxt libxaw xaw3d libxft fontconfig pango \
                         cairo

And finally, here's the packages and basic setup for emulation,
virtualization, and containerization:

# pacman -S --asexplicit simh bochs qemu libvirt virt-manager lxc \
                         docker openbsd-netcat bridge-utils ebtables \
                         dnsmasq arch-install-scripts vagrant

Now let's set this stuff up. First, so that our user can access
libvirt directly without having to enter a password we will set up a
custom polkit rule:

# vi /etc/polkit-1/rules.d/49-libvirtwheel.rules

<file>
polkit.addRule(function(action, subject){
    if (action.id == "org.libvirt.unix.manage" &&
        subject.isInGroup("wheel")) {
            return polkit.Result.YES;
    }
});
</file>

Note that this changes the default behavior of allowing access to
wheel users but requiring a password.

Now let's enable nested virtualization for KVM (see
https://wiki.archlinux.org/index.php/KVM#Nested_virtualization):

# vi /etc/modprobe.d/modprobe.conf

<file>
options kvm_intel nested=1
</file>

We add our user to the docker group allowing access to the docker
service directly to our normal user:

# usermod -a -G docker zebdeos

And then finally enable the libvirt and docker services:

# systemctl enable libvirtd
# systemctl enable docker

TODO: libvirt vagrant provider installation

I like to install a load of docs in case I'm stuck offline somewhere:

# pacman -S --asexplicit linux-manpages linux-docs sqlite-doc \
                         ruby-docs arch-wiki-docs bash-docs gcc-docs \
                         python-docs python2-docs freedesktop-docs \
                         xorg-docs zsh-doc

Finally, I install a couple more games:

# pacman -S freeciv freecol minetest

There are many games available from the repos, here's a few on my
radar (but not necessarily installed):

curseofwar gnugo ccgo simultrans stone-soup agband wesnoth widelands
hex-a-hop gnuchess xboard speed-dream torcs vdrift flightgear oolite
freedroidrpg naev warzone2100 0ad

Now things are installed we can exit the chroot and reboot the system:

# exit
# umount -R /mnt
# sync
# shutdown -h now  # I prefer to halt to easily remove USB stick

Once the system has rebooted I like to install some packages from the
AUR:

- cower (an AUR helper)
- firefox-developer (Firefox Developer Edition)
- atom-editor (Atom Text Editor from GitHub)
- leiningen (Clojure build tool)
- lighttable-git (LightTable)
- Perl 6 (rakudo / moarvm)

There are more AUR packages I will install when and as needed:

- Haxe
- OpenFL
- brogue
- dwarffortress

TODO: enabling suspend and resume for laptop?
